#!/bin/bash
# AlbraTrading Î∞∞Ìè¨ Ï†Ñ Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏
# Î∞∞Ìè¨ Ï†Ñ Î™®Îì† ÏùòÏ°¥ÏÑ±Í≥º ÏÑ§Ï†ïÏùÑ Í≤ÄÏ¶ù

echo "======================================"
echo "   Pre-deployment Validation"
echo "   $(date '+%Y-%m-%d %H:%M:%S')"
echo "======================================"
echo ""

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

ERRORS=0

# 1. Python Î≤ÑÏ†Ñ ÌôïÏù∏
echo "üêç Python Version Check:"
PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
REQUIRED_VERSION="3.10"

if [[ "$PYTHON_VERSION" == "$REQUIRED_VERSION"* ]]; then
    echo -e "${GREEN}‚úì${NC} Python $PYTHON_VERSION (OK)"
else
    echo -e "${RED}‚úó${NC} Python $PYTHON_VERSION (Required: $REQUIRED_VERSION+)"
    ((ERRORS++))
fi
echo ""

# 2. Í∞ÄÏÉÅÌôòÍ≤Ω ÌôïÏù∏
echo "üì¶ Virtual Environment:"
if [ -d "venv" ]; then
    echo -e "${GREEN}‚úì${NC} venv directory exists"
    
    # Í∞ÄÏÉÅÌôòÍ≤Ω ÎÇ¥ Python ÌôïÏù∏
    if [ -f "venv/bin/python" ]; then
        VENV_PYTHON_VERSION=$(venv/bin/python --version 2>&1 | awk '{print $2}')
        echo -e "${GREEN}‚úì${NC} venv Python: $VENV_PYTHON_VERSION"
    else
        echo -e "${RED}‚úó${NC} venv Python not found"
        ((ERRORS++))
    fi
else
    echo -e "${RED}‚úó${NC} venv directory not found"
    ((ERRORS++))
fi
echo ""

# 3. ÌïÑÏàò ÌååÏùº ÌôïÏù∏
echo "üìÑ Required Files:"
REQUIRED_FILES=(
    ".env"
    "config/config.yaml"
    "src/main_multi_account.py"
    "requirements.txt"
    "scripts/setup_systemd_multi.sh"
    "scripts/systemd/albratrading-single.service"
    "scripts/systemd/albratrading-multi.service"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì${NC} $file"
    else
        echo -e "${RED}‚úó${NC} $file (MISSING)"
        ((ERRORS++))
    fi
done
echo ""

# 4. ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
echo "üîë Environment Variables:"
if [ -f ".env" ]; then
    # ÌïÑÏàò ÌôòÍ≤Ω Î≥ÄÏàò
    REQUIRED_VARS=(
        "BINANCE_API_KEY"
        "BINANCE_SECRET_KEY"
        "TELEGRAM_BOT_TOKEN"
        "TELEGRAM_CHAT_ID"
    )
    
    for var in "${REQUIRED_VARS[@]}"; do
        if grep -q "^${var}=" .env && ! grep -q "^${var}=$" .env; then
            echo -e "${GREEN}‚úì${NC} $var is set"
        else
            echo -e "${RED}‚úó${NC} $var is missing or empty"
            ((ERRORS++))
        fi
    done
    
    # ÏÑ†ÌÉùÏ†Å ÌôòÍ≤Ω Î≥ÄÏàò (Î©ÄÌã∞ Í≥ÑÏ¢å)
    if grep -q "^SUB1_API_KEY=" .env; then
        echo -e "${BLUE}‚Ñπ${NC} SUB1_API_KEY is configured (multi-account ready)"
    fi
else
    echo -e "${RED}‚úó${NC} .env file not found"
    ((ERRORS++))
fi
echo ""

# 5. ÏÑ§Ï†ï Í≤ÄÏ¶ù (PythonÏúºÎ°ú Ïã§Ï†ú Í≤ÄÏ¶ù)
echo "‚öôÔ∏è Configuration Validation:"
if [ -f "venv/bin/python" ]; then
    # ÏûÑÌè¨Ìä∏ ÌÖåÏä§Ìä∏
    echo "Testing imports..."
    venv/bin/python -c "
import sys
sys.path.insert(0, '.')
try:
    from src.utils.config_manager import ConfigManager
    from src.utils.logger import setup_logger
    print('‚úì Basic imports successful')
except Exception as e:
    print(f'‚úó Import error: {e}')
    sys.exit(1)
" || ((ERRORS++))

    # ÏÑ§Ï†ï ÌååÏùº Í≤ÄÏ¶ù (import ÌÖåÏä§Ìä∏Îßå ÏàòÌñâ)
    venv/bin/python -c "
import sys
sys.path.insert(0, '.')
try:
    # ÌïµÏã¨ Î™®Îìà import ÌÖåÏä§Ìä∏
    from src.main_multi_account import MultiAccountTradingSystem
    from src.core.binance_api import BinanceAPI
    from src.strategies.strategy_factory import get_strategy_factory
    from src.utils.config_manager import ConfigManager
    from src.monitoring.position_sync_monitor import PositionSyncMonitor
    
    # ÏÑ§Ï†ï ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂ÄÎßå ÌôïÏù∏
    import os
    if os.path.exists('config/config.yaml') and os.path.exists('.env'):
        print('‚úì Configuration files found')
    else:
        print('‚úó Configuration files missing')
        sys.exit(1)
    
    print('‚úì All imports successful')
except ImportError as e:
    print(f'‚úó Import error: {e}')
    sys.exit(1)
except Exception as e:
    print(f'‚úó Unexpected error: {e}')
    sys.exit(1)
"
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì${NC} Configuration validation passed"
    else
        echo -e "${RED}‚úó${NC} Configuration validation failed"
        ((ERRORS++))
    fi
fi
echo ""

# 6. ÎîîÎ†âÌÜ†Î¶¨ Í∂åÌïú ÌôïÏù∏
echo "üìÅ Directory Permissions:"
REQUIRED_DIRS=("logs" "state" "data")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        if [ -w "$dir" ]; then
            echo -e "${GREEN}‚úì${NC} $dir (writable)"
        else
            echo -e "${RED}‚úó${NC} $dir (not writable)"
            ((ERRORS++))
        fi
    else
        echo -e "${YELLOW}‚ö†${NC} $dir (will be created)"
        mkdir -p "$dir"
    fi
done
echo ""

# 7. systemd ÌååÏùº Í≤ÄÏ¶ù
echo "üîß Systemd Service Files:"
SERVICE_FILES=(
    "scripts/systemd/albratrading-single.service"
    "scripts/systemd/albratrading-multi.service"
)

for file in "${SERVICE_FILES[@]}"; do
    if [ -f "$file" ]; then
        # ExecStart Í≤ΩÎ°ú ÌôïÏù∏
        EXEC_PATH=$(grep "ExecStart=" "$file" | cut -d= -f2 | awk '{print $1}')
        SCRIPT_PATH=$(grep "ExecStart=" "$file" | cut -d= -f2 | awk '{print $2}')
        
        if [[ "$SCRIPT_PATH" == *"main_multi_account.py"* ]]; then
            echo -e "${GREEN}‚úì${NC} $file uses main_multi_account.py"
        else
            echo -e "${YELLOW}‚ö†${NC} $file uses legacy main.py"
        fi
    fi
done
echo ""

# 8. Ìè¨Ìä∏ Í∞ÄÏö©ÏÑ± ÌôïÏù∏
echo "üåê Port Availability:"
if ! sudo lsof -i :5000 >/dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC} Port 5000 is available"
else
    echo -e "${YELLOW}‚ö†${NC} Port 5000 is in use"
    sudo lsof -i :5000 | tail -n +2
fi
echo ""

# ÏµúÏ¢Ö Í≤∞Í≥º
echo "======================================"
echo "üìä Validation Summary"
echo "======================================"

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All checks passed! Ready for deployment.${NC}"
    echo ""
    echo "Next steps:"
    echo "1. cd /home/ubuntu/AlbraTrading"
    echo "2. ./scripts/setup_systemd_multi.sh single  # For single mode"
    echo "   OR"
    echo "   ./scripts/setup_systemd_multi.sh multi   # For multi mode"
    exit 0
else
    echo -e "${RED}‚ùå Found $ERRORS errors. Please fix them before deployment.${NC}"
    echo ""
    echo "Common fixes:"
    echo "- Create .env file from .env.example"
    echo "- Install Python 3.12"
    echo "- Create virtual environment: python3.12 -m venv venv"
    echo "- Install dependencies: venv/bin/pip install -r requirements.txt"
    exit 1
fi
