#!/bin/bash
# AlbraTrading System - Deployment Verification Script v3.0
# Multi-mode systemd Í∏∞Î∞ò ÏãúÏä§ÌÖúÏö© Ï≤¥ÌÅ¨ Ïä§ÌÅ¨Î¶ΩÌä∏

echo "======================================"
echo "   AlbraTrading Deployment Check v3.0"
echo "   $(date '+%Y-%m-%d %H:%M:%S %Z')"
echo "======================================"
echo ""

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Í≤∞Í≥º Ïπ¥Ïö¥ÌÑ∞
CRITICAL_ISSUES=0
WARNINGS=0

# ÌòÑÏû¨ ÌôúÏÑ± Î™®Îìú ÌôïÏù∏
ACTIVE_MODE="none"
if sudo systemctl is-active --quiet albratrading-single 2>/dev/null; then
    ACTIVE_MODE="single"
elif sudo systemctl is-active --quiet albratrading-multi 2>/dev/null; then
    ACTIVE_MODE="multi"
fi

# 1. Systemd ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ (Í∞ÄÏû• Ï§ëÏöî)
echo "üîß Systemd Service Status:"
echo "-------------------------"

if [ "$ACTIVE_MODE" = "none" ]; then
    echo -e "${RED}‚úó${NC} No AlbraTrading service is active!"
    echo "  Available services:"
    
    # Îã®Ïùº Î™®Îìú ÏÑúÎπÑÏä§ ÌôïÏù∏
    if sudo systemctl list-unit-files | grep -q albratrading-single; then
        SINGLE_STATUS=$(sudo systemctl is-enabled albratrading-single 2>/dev/null)
        echo "  - albratrading-single: $SINGLE_STATUS"
    fi
    
    # Î©ÄÌã∞ Î™®Îìú ÏÑúÎπÑÏä§ ÌôïÏù∏
    if sudo systemctl list-unit-files | grep -q albratrading-multi; then
        MULTI_STATUS=$(sudo systemctl is-enabled albratrading-multi 2>/dev/null)
        echo "  - albratrading-multi: $MULTI_STATUS"
    fi
    
    ((CRITICAL_ISSUES++))
else
    SERVICE_NAME="albratrading-$ACTIVE_MODE"
    echo -e "${GREEN}‚úì${NC} Active mode: ${BLUE}$ACTIVE_MODE${NC}"
    echo -e "${GREEN}‚úì${NC} Service $SERVICE_NAME is active"
    
    # ÏÉÅÏÑ∏ Ï†ïÎ≥¥
    SERVICE_INFO=$(sudo systemctl status $SERVICE_NAME --no-pager | head -15)
    echo "$SERVICE_INFO" | grep -E "Active:|Main PID:|Memory:|CPU:" | while read line; do
        echo "  $line"
    done
fi
echo ""

# 2. Python ÌîÑÎ°úÏÑ∏Ïä§ ÌôïÏù∏ (main_multi_account.py ÌôïÏù∏)
echo "üêç Python Processes:"
echo "-------------------"
# main_multi_account.py ÎòêÎäî main.py ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞
PYTHON_PROCS=$(sudo ps aux | grep -E "python.*main(_multi_account)?\.py" | grep -v grep)
if [ -n "$PYTHON_PROCS" ]; then
    echo "$PYTHON_PROCS" | while read proc; do
        PID=$(echo $proc | awk '{print $2}')
        MEM=$(echo $proc | awk '{print $4}')
        CPU=$(echo $proc | awk '{print $3}')
        CMD=$(echo $proc | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
        
        # main_multi_account.pyÏù∏ÏßÄ main.pyÏù∏ÏßÄ ÌôïÏù∏
        if echo "$CMD" | grep -q "main_multi_account.py"; then
            echo -e "${GREEN}‚úì${NC} PID $PID - ${BLUE}main_multi_account.py${NC} - CPU: $CPU%, MEM: $MEM%"
        else
            echo -e "${GREEN}‚úì${NC} PID $PID - main.py (legacy) - CPU: $CPU%, MEM: $MEM%"
        fi
    done
    
    # ÌîÑÎ°úÏÑ∏Ïä§ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
    MAIN_PID=$(echo "$PYTHON_PROCS" | head -1 | awk '{print $2}')
    if [ -n "$MAIN_PID" ]; then
        PROCESS_TIME=$(ps -o etime= -p $MAIN_PID 2>/dev/null | xargs)
        echo "  Uptime: $PROCESS_TIME"
    fi
else
    echo -e "${RED}‚úó${NC} No trading process found!"
    ((CRITICAL_ISSUES++))
fi
echo ""

# 3. Î™®ÎìúÎ≥Ñ Î°úÍ∑∏ ÌôïÏù∏
echo "üìù System Logs:"
echo "--------------"

if [ "$ACTIVE_MODE" != "none" ]; then
    SERVICE_NAME="albratrading-$ACTIVE_MODE"
    
    # ÏµúÍ∑º ÏóêÎü¨ ÌôïÏù∏
    RECENT_ERRORS=$(sudo journalctl -u $SERVICE_NAME -p err -n 5 --no-pager 2>/dev/null)
    if [ -n "$RECENT_ERRORS" ] && [ "$RECENT_ERRORS" != "-- No entries --" ]; then
        echo -e "${YELLOW}‚ö†${NC} Recent errors found in $SERVICE_NAME:"
        echo "$RECENT_ERRORS" | tail -5
        ((WARNINGS++))
    else
        echo -e "${GREEN}‚úì${NC} No recent errors in system logs"
    fi
    
    # Î°úÍ∑∏ ÌååÏùº ÌôïÏù∏
    if [ "$ACTIVE_MODE" = "single" ]; then
        LOG_FILE="/home/ubuntu/AlbraTrading/logs/systemd_single.log"
    else
        LOG_FILE="/home/ubuntu/AlbraTrading/logs/systemd_multi.log"
    fi
    
    if [ -f "$LOG_FILE" ]; then
        LOG_SIZE=$(du -h "$LOG_FILE" | cut -f1)
        LAST_LINES=$(tail -1 "$LOG_FILE" 2>/dev/null)
        echo -e "${GREEN}‚úì${NC} Log file: $LOG_FILE ($LOG_SIZE)"
        if [ -n "$LAST_LINES" ]; then
            echo "  Last entry: $(echo "$LAST_LINES" | cut -c1-60)..."
        fi
    fi
fi
echo ""

# 4. Ìè¨Ìä∏ ÌôïÏù∏ (Flask ÎåÄÏãúÎ≥¥Îìú)
echo "üåê Network Ports:"
echo "----------------"
PORT_CHECK=$(sudo ss -tlnp | grep :5000 2>/dev/null)
if [ -n "$PORT_CHECK" ]; then
    echo -e "${GREEN}‚úì${NC} Port 5000 is listening (Web Dashboard)"
    echo "  $PORT_CHECK"
else
    echo -e "${YELLOW}‚ö†${NC} Port 5000 is not listening"
    echo "  Note: Dashboard may be disabled or starting up"
    ((WARNINGS++))
fi
echo ""

# 5. API Ìó¨Ïä§ Ï≤¥ÌÅ¨
echo "üîç API Health Check:"
echo "-------------------"
API_RESPONSE=""
for i in {1..3}; do
    API_RESPONSE=$(curl -s -m 5 -w "\n%{http_code}" http://localhost:5000/api/status 2>/dev/null)
    HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
    if [ "$HTTP_CODE" = "200" ]; then
        break
    fi
    sleep 2
done

if [ "$HTTP_CODE" = "200" ]; then
    echo -e "${GREEN}‚úì${NC} API is responding"
    JSON_RESPONSE=$(echo "$API_RESPONSE" | head -n-1)
    
    # JSON ÌååÏã±
    if command -v jq &> /dev/null; then
        STATUS=$(echo "$JSON_RESPONSE" | jq -r '.status' 2>/dev/null)
        POSITIONS=$(echo "$JSON_RESPONSE" | jq -r '.positions' 2>/dev/null)
        if [ -n "$STATUS" ]; then
            echo "  Status: $STATUS"
            echo "  Active positions: $POSITIONS"
        fi
    fi
else
    echo -e "${YELLOW}‚ö†${NC} API not responding (dashboard may be disabled)"
fi
echo ""

# 6. Î©ÄÌã∞ Í≥ÑÏ¢å Î™®Îìú ÌôïÏù∏
echo "üè¶ Multi-Account Configuration:"
echo "------------------------------"
if [ -f "config/config.yaml" ]; then
    MULTI_ENABLED=$(grep -A1 "multi_account:" config/config.yaml | grep "enabled:" | awk '{print $2}')
    MULTI_MODE=$(grep -A2 "multi_account:" config/config.yaml | grep "mode:" | awk '{print $2}' | tr -d '"')
    
    if [ "$MULTI_ENABLED" = "true" ]; then
        echo -e "${GREEN}‚úì${NC} Multi-account enabled (mode: $MULTI_MODE)"
        
        # ÏÑúÎ∏å Í≥ÑÏ¢å Ïàò ÌôïÏù∏
        SUB_ACCOUNTS=$(grep -c "account_id:" config/config.yaml 2>/dev/null || echo "0")
        if [ "$SUB_ACCOUNTS" -gt 0 ]; then
            echo "  Sub accounts configured: $SUB_ACCOUNTS"
        fi
    else
        echo -e "${BLUE}‚Ñπ${NC} Multi-account disabled (single mode)"
    fi
fi
echo ""

# 7. Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ
echo "üíª System Resources:"
echo "-------------------"
# CPU ÏÇ¨Ïö©Î•†
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
echo "CPU Usage: $CPU_USAGE%"

# Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†
MEM_INFO=$(free -m | grep "^Mem:")
MEM_TOTAL=$(echo $MEM_INFO | awk '{print $2}')
MEM_USED=$(echo $MEM_INFO | awk '{print $3}')
MEM_PERCENT=$((MEM_USED * 100 / MEM_TOTAL))
echo "Memory: ${MEM_USED}MB / ${MEM_TOTAL}MB (${MEM_PERCENT}%)"

# ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Î•†
DISK_INFO=$(df -h / | tail -1)
DISK_PERCENT=$(echo "$DISK_INFO" | awk '{print $5}' | sed 's/%//')
echo "Disk: $(echo "$DISK_INFO" | awk '{print $3}') / $(echo "$DISK_INFO" | awk '{print $2}') (${DISK_PERCENT}%)"

if [ "$DISK_PERCENT" -gt 90 ]; then
    echo -e "${RED}‚ö†${NC} Critical: Disk space low!"
    ((CRITICAL_ISSUES++))
elif [ "$DISK_PERCENT" -gt 80 ]; then
    echo -e "${YELLOW}‚ö†${NC} Warning: Disk usage high"
    ((WARNINGS++))
fi
echo ""

# 8. ÏÑ§Ï†ï ÌååÏùº ÌôïÏù∏
echo "‚öôÔ∏è Configuration Files:"
echo "--------------------"
if [ -f "config/config.yaml" ]; then
    echo -e "${GREEN}‚úì${NC} config.yaml found"
    # ÌôúÏÑ±ÌôîÎêú Ï†ÑÎûµ ÌôïÏù∏
    TFPE_ENABLED=$(grep -A2 "tfpe:" config/config.yaml | grep "enabled:" | awk '{print $2}')
    if [ "$TFPE_ENABLED" = "true" ]; then
        echo "  TFPE strategy: enabled"
    fi
fi

if [ -f ".env" ]; then
    echo -e "${GREEN}‚úì${NC} .env file found"
    # API ÌÇ§ ÌôïÏù∏ (Î≥¥ÏïàÏÉÅ ÏùºÎ∂ÄÎßå ÌëúÏãú)
    if grep -q "BINANCE_API_KEY=" .env; then
        echo "  Main account API key: configured"
    fi
    if grep -q "SUB1_API_KEY=" .env; then
        echo "  Sub account 1 API key: configured"
    fi
else
    echo -e "${RED}‚úó${NC} .env file missing!"
    ((CRITICAL_ISSUES++))
fi
echo ""

# 9. ÏµúÏ¢Ö ÏöîÏïΩ
echo "======================================"
echo "üìã Deployment Summary"
echo "======================================"

if [ $CRITICAL_ISSUES -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Perfect! All systems operational.${NC}"
    echo -e "Mode: ${BLUE}$ACTIVE_MODE${NC}"
    exit 0
elif [ $CRITICAL_ISSUES -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Deployment successful with $WARNINGS warnings.${NC}"
    echo -e "Mode: ${BLUE}$ACTIVE_MODE${NC}"
    echo "The system is running but may need attention."
    exit 0
else
    echo -e "${RED}‚ùå Deployment failed! $CRITICAL_ISSUES critical issues found.${NC}"
    echo ""
    echo "üîß Troubleshooting Commands:"
    echo "1. Check service status: ./scripts/setup_systemd_multi.sh status"
    echo "2. Start single mode: sudo systemctl start albratrading-single"
    echo "3. Start multi mode: sudo systemctl start albratrading-multi"
    echo "4. View logs: sudo journalctl -u albratrading-$ACTIVE_MODE -f"
    echo "5. Switch mode: ./scripts/setup_systemd_multi.sh switch"
    exit 1
fi
